# build number format
name: $(date:yy)$(DayOfYear)$(rev:.r)

# Trigger ci builds for commits into master and any release branches
trigger:
- master
- release/*

# Trigger pr builds for commits into master and any release branches
pr:
- master
- release/*

# The agent pool the build will run on
pool:
  name: VSEng-MicroBuildVS2019
  demands: msbuild

# Build variables
# None of these are settable at build queue time. To do that, remove the variable from this list,
# browse to the pipeline editor in AzDO, add the variable there, and make it settable at queue time.
variables:
  BuildConfiguration: Release
  DropRoot: \\cpvsbuild\Drops\DSTools\PTVS\$(Build.SourceBranchName)\$(Build.BuildNumber)\
  FileVersionPrefix: 16.9
  IncludeDjangoHtmlExtensions: true
  IncludeLiveShare: true
  IncludeMiniconda: true
  IncludeMSI: false
  IncludeUWP: false
  LocType: Full
  SignType: Real
  TeamName: DSTools
  TrackFileAccess: false
  VisualStudioVersion: 16.0
  VSTarget: 16.0

# TODO:
# For PR builds, don't real sign. Test sign instead.

steps:

# check out code clean from source control
- checkout: self
  clean: true

# add build tag
- powershell: 'Write-Host "##vso[build.addbuildtag]$env:VSTarget"'
  displayName: 'Add vstarget build tag'

# install plugins needed for swixproj/vsmanproj, signing, and localization
- task: MicroBuildSwixPlugin@3
  displayName: 'Install swix plugin'
  inputs:
    dropName: 'Products/$(System.TeamProject)/$(Build.Repository.Name)/$(Build.SourceBranchName)/$(Build.BuildNumber)'
    dropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'
    feedSource: 'https://mseng.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'

- task: MicroBuildSigningPlugin@3
  displayName: 'Install signing plugin'
  inputs:
    signType: $(SignType)
    feedSource: 'https://devdiv.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'
  enabled: false # Disable signing since it only works in approved project ids.
  # TODO: remove the line above once the rest of the build is working, will need to get approval
  # once the new build pipeline is created before this step will work.

- task: MicroBuildLocalizationPlugin@3
  displayName: 'Install localization plugin'
  inputs:
    type: $(LocType)
    languages: 'VS'
    feedSource: 'https://mseng.pkgs.visualstudio.com/DefaultCollection/_packaging/MicroBuildToolset/nuget/v3/index.json'

# Run a powershell script that does a package restore, some symlinking, and installs debugpy
- task: PowerShell@1
  displayName: 'Restore packages'
  inputs:
    scriptName: Build/PreBuild.ps1
    arguments: '-vstarget $(VSTarget)'

# Clean the old swix outputs
# (This shouldn't be required since the build performs a clean when getting sources)
- task: DeleteFiles@1
  displayName: 'Clean old swix outputs'
  inputs:
    SourceFolder: '$(Build.BinariesDirectory)\raw\setup\swix'
    Contents: '**'
  continueOnError: true

# Build the product
- task: MSBuild@1
  displayName: 'Build product'
  inputs:
    solution: Python/Product/dirs.proj
    msbuildVersion: 16.0
    platform: 'AnyCPU'
    configuration: '$(BuildConfiguration)'

# Build the installer
- task: MSBuild@1
  displayName: 'Build installer'
  inputs:
    solution: Python/Setup/dirs.proj
    msbuildVersion: 16.0
    platform: 'AnyCPU'
    configuration: '$(BuildConfiguration)'
    msbuildArguments: '/p:SkipProduct=true'

# Publish buld artifact: raw
- task: PublishBuildArtifacts@1
  displayName: '[If build failed] Publish raw build artifact'
  inputs:
    PathtoPublish: '$(Build.BinariesDirectory)\raw'
    ArtifactName: raw
  condition: failed()

# Upload vsts drop
- task: MicroBuildUploadVstsDropFolder@1
  displayName: 'Upload vsts drop'
  inputs:
    DropFolder: '$(Build.StagingDirectory)\release'
    DropServiceUri: 'https://devdiv.artifacts.visualstudio.com/DefaultCollection'
    VSDropServiceUri: 'https://vsdrop.corp.microsoft.com/file/v1'
  continueOnError: true

# copy some files around to prepare for publishing build artifacts
- task: CopyFiles@2
  displayName: 'Copy source to staging/src'
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/src'
    CleanTargetFolder: true

- task: CopyFiles@2
  displayName: 'Copy layout to staging'
  inputs:
    SourceFolder: '$(Build.BinariesDirectory)/layout'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/layout'
    CleanTargetFolder: true

- task: CopyFiles@2
  displayName: 'Copy binaries to staging'
  inputs:
    SourceFolder: '$(Build.BinariesDirectory)/raw/binaries'
    TargetFolder: '$(Build.ArtifactStagingDirectory)/binaries'
    CleanTargetFolder: true

- task: CopyFiles@2
  displayName: 'Prepare for symbol publishing'
  inputs:
    SourceFolder: '$(Build.ArtifactStagingDirectory)/binaries'
    Contents: |
     Microsoft.PythonTools*.pdb
     Microsoft.PythonTools*.dll
     Microsoft.PythonTools*.exe
     Microsoft.CookiecutterTools.pdb
     Microsoft.CookiecutterTools.dll
     Microsoft.IronPythonTools.Resolver.pdb
     Microsoft.IronPythonTools.Resolver.dll
     Microsoft.Python.Analysis.Engine.dll
     Microsoft.Python.Analysis.Engine.pdb
     Microsoft.Python.LanguageServer.Core.dll
     Microsoft.Python.LanguageServer.Core.pdb
     PyDebugAttach*.pdb
     PyDebugAttach*.dll
     VsPyProf*.pdb
     VsPyProf*.dll
    TargetFolder: '$(Build.ArtifactStagingDirectory)/symbols_and_binaries'

# Index sources and publish symbols
- task: PublishSymbols@2
  displayName: 'Publish symbols'
  inputs:
    symbolsFolder: '$(Build.ArtifactStagingDirectory)/symbols_and_binaries'
    symbolServerType: TeamServices

# MicroBuild cleanup
- task: MicroBuildCleanup@1
  displayName: 'Execute cleanup tasks'
  condition: succeededOrFailed()

# Compress staging output
- task: ArchiveFiles@2
  displayName: 'Compress staging dir'
  inputs:
    rootFolderOrFile: '$(Build.ArtifactStagingDirectory)'
    includeRootFolder: false
    archiveType: 'zip'
    archiveFile: '$(Build.ArtifactStagingDirectory)/PTVSBuildArchive.zip'
    replaceExistingArchive: true

# Publish build artifact: binaries
- task: PublishBuildArtifacts@1
  displayName: 'Upload binaries to build artifacts'
  inputs:
    PathtoPublish: '$(Build.BinariesDirectory)/raw/binaries'
    ArtifactName: Binaries

# Publish build artifact: staging output
- task: PublishBuildArtifacts@1
  displayName: 'Upload staging zip to build artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)/PTVSBuildArchive.zip'
    ArtifactName: 'PTVS Staging Output'
